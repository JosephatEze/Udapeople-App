version: 2.1
orbs: 
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@2.0.3
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" 
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build-job
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
          
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1
  
      - save_cache:
          paths: frontend/node_modules
          key: frontend-build-job

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build-job
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1    
      - save_cache:
          paths: backend/node_modules
          key: backend-build-job
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-test-job
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1   
      - save_cache:
          paths: frontend/node_modules
          key: frontend-test-job
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-test-job
      - run:
          name: test back-end
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1     
      - save_cache:
          paths: backend/node_modules
          key: backend-test-job

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-scan
      - run:
          name: analyze front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1
          # npm install oauth-sign@^0.9.0   
          # Your code should be here    
      - save_cache:
          paths: frontend/node_modules
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-scan
      - run:
          name: analyze back-end
          command: |
              cd backend
              npm install --save-dev webpack@5.73.0
              npm update mkdirp --depth 6
              npm update path-parse --depth 10
              npm update kind-of --depth 14
              npm install 
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
              
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1
          # npm install oauth-sign@^0.9.0
       
      - save_cache:
          paths: backend/node_modules
          key: backend-scan

  deploy-infrastructure:
    docker:
       - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: infrastructure-deployment
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --tags project=udapeople --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --region us-east-1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --tags project=udapeople --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --region us-east-1
      - run:
          name: Add back-end ip to ansible inventory
         # parameters:
             # Backendip:
          command: | 
             echo "[web]" > .circleci/ansible/inventory.txt  
             aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output=text >> .circleci/ansible/inventory.txt 
             cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt      
      - destroy-environment
      - save_cache:
          paths: .circleci/files
          key: infrastructure-deployment
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
        - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: aa:1f:b6:78:3b:c5:61:91:4a:e0:97:9f:32:62:1c:ef
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |   
             apk add --update ansible
           # yum install -y tar gzip
           # yum update
           # yum install -y python3-pip python3 python3-setuptools
           # pip3 install boto3 --user
           # cat /etc/*-release 
           # uncomment python and boto commands to installed for dynamic invetory plugin
      - run:
          name: Configure server
          command: |
             ansible-playbook -i .circleci/ansible/inventory.txt  .circleci/ansible/configure-server.yml
      - destroy-environment
      # Here's where you will add some code to rollback on failure 
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-migration
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
          # Run and save the migration output
      - run:
          name: Send migration results to memstash
          command: |  
            if grep -q "has been executed successfully." ~/backend/migrations_dump.txt
            then
                curl https://kvdb.io/K9eP7c18yzzvrVqhXAynsC/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1' 
              # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first    
            fi
      - destroy-environment
      - save_cache:
          paths: backend/node_modules
          key: backend-migration
     # Here's where you will add some code to rollback on failure  
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Get backend url
          command: |
            BACKEND_IP="aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output=text"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            - run: aws s3 sync ~/frontend/ s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --delete
      - destroy-environment
      # Here's where you will add some code to rollback on failure 
      - save_cache:
          paths: .circleci/files
          key: frontend-deployment              
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires: 
            - build-backend
      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires: 
            - build-frontend
      - deploy-infrastructure:
          requires: 
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          filters:
            branches:
              only: master
      - configure-infrastructure:
          requires: 
            - deploy-infrastructure
      - run-migrations:
          requires: 
            - configure-infrastructure
      - deploy-frontend:
          requires: 
            - run-migrations