version: 2.1
orbs: 
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

 
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build-job
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
          
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1
  
      - save_cache:
          paths: frontend/node_modules
          key: frontend-build-job

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build-job
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1    
      - save_cache:
          paths: backend/node_modules
          key: backend-build-job
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-test-job
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1   
      - save_cache:
          paths: frontend/node_modules
          key: frontend-test-job
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-test-job
      - run:
          name: test back-end
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1     
      - save_cache:
          paths: backend/node_modules
          key: backend-test-job

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-scan
      - run:
          name: analyze front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1
          # npm install oauth-sign@^0.9.0   
          # Your code here    
      - save_cache:
          paths: frontend/node_modules
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-scan
      - run:
          name: analyze back-end
          command: |
              cd backend
              npm install --save-dev webpack@5.73.0
              npm update mkdirp --depth 6
              npm update path-parse --depth 10
              npm update kind-of --depth 14
              npm install 
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
              
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1
          # npm install oauth-sign@^0.9.0
       
      - save_cache:
          paths: backend/node_modules
          key: backend-scan

  deploy-infrastructure:
    docker:
       - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --tags project=udapeople --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --region us-east-1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --tags project=udapeople --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --region us-east-1
      - run:
          name: Add back-end ip to ansible inventory
          parameters:
              Backendip:
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory
           # aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Project,Values=udapeople" --output text >> inventory
           # aws cloudformation list-exports --query "Exports[?Name==\`BackendIP\`].Value" --no-paginate --output text >> ~/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt  
         
      - destroy-environment
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
        - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: "aa:1f:b6:78:3b:c5:61:91:4a:e0:97:9f:32:62:1c:ef"
      - attach_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt 
      - run:
          name: Install dependencies
          command: |
             apk add --update ansible
      - run:
          name: Configure server
          command: |
             ansible-playbook -i inventory.txt configure-server.yml
             ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      # Here's where you will add some code to rollback on failure      


    

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires: 
            - build-backend
      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires: 
            - build-frontend
      - deploy-infrastructure:
          requires: 
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          filters:
            branches:
              only: master
      - configure-infrastructure:
          requires: 
            - deploy-infrastructure


