version: 2.1
orbs: 
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@2.0.3
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7} "
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
                  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/K9eP7c18yzzvrVqhXAynsC/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi
           # SUCCESS = 1
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build-job
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
          
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1
  
      - save_cache:
          paths: frontend/node_modules
          key: frontend-build-job

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build-job
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install 
            npm run build
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1    
      - save_cache:
          paths: backend/node_modules
          key: backend-build-job
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-test-job
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1   
      - save_cache:
          paths: frontend/node_modules
          key: frontend-test-job
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build-job
      - run:
          name: test back-end
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1     
      - save_cache:
          paths: backend/node_modules
          key: backend-test-job

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build-job #frontend-scan
      - run:
          name: analyze front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
           # npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1
          # npm install oauth-sign@^0.9.0   
            
      - save_cache:
          paths: frontend/node_modules
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build-job
      - run:
          name: analyze back-end
          command: |
              cd backend
              npm install 
              npm audit fix --audit-level=critical --force
             # npm audit --audit-level=critical 
             # npm install --save-dev webpack@5.73.0
              #npm update mkdirp --depth 6
             # npm update path-parse --depth 10
             # npm update kind-of --depth 14
                   
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1
          # npm install oauth-sign@^0.9.0  
      - save_cache:
          paths: backend/node_modules
          key: backend-scan

  deploy-infrastructure:
    docker:
       - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: infrastructure-deployment
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --tags project=udapeople --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --region us-east-1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --tags project=udapeople --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --region us-east-1
      - run:
          name: Add back-end ip to ansible inventory
         # parameters:
             # Backendip:
          command: | 
             echo "[web]" > .circleci/ansible/inventory.txt  
             aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output=text >> .circleci/ansible/inventory.txt 
             cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt      
      - destroy-environment
      - save_cache:
          paths: .circleci/files
          key: infrastructure-deployment
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
        - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "6d:5f:38:dc:27:6c:10:0e:ae:69:aa:99:37:6b:91:87"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |   
             apk add --update ansible
             pip install awscli
            #ansible --version
            # pip install --upgrade pip
            # apk add --update python3 py3-pip
           # aws --version
           # apk add --no-cache python3 py3-pip && pip3 install --upgrade pip && pip3 install awscli && rm -rf /var/cache/apk/*
           #- run: apt-get install -y python3-pip python3 python3-setuptools
           # - run: pip3 install awscli
           # yum update
           # yum install -y python3-pip python3 python3-setuptools
           # pip3 install boto3 --user
           # cat /etc/*-release 
           # uncomment python and boto commands to installed for dynamic invetory plugin
      - run:
          name: Configure server
          command: |
             cd .circleci/ansible
             ansible-playbook -i inventory.txt configure-server.yml
      #- destroy-environment
      # Here's where you will add some code to rollback ON EVENT OF failure 
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build-job
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install  
            npm run migrations > migrations_dump.txt
          #  Run and save the migration output
      - run:
          name: Send migration results to kvdb.io
          command: |  
            if grep -q "has been executed successfully." ~/backend/migrations_dump.txt
            then
                curl https://kvdb.io/K9eP7c18yzzvrVqhXAynsC/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1' 
                # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first    
            fi
      - revert-migrations
      #- destroy-environment
      #- save_cache:
      #    paths: backend/node_modules
      #    key: backend-migration
     # Here's where you will add some code to rollback on failure  
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
      #- image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      - restore_cache:
          keys: frontend-scan
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
            apk add --update nodejs npm
          #yum install -y tar gzip
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output=text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: zip frontend folder
          command: |
            cd frontend
            mkdir -p ~/project/frontend/dist
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build 
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
           # npm audit fix
      - run:
          name: delete bucket objects
          when: on_fail
          command: |
             aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
          #  aws s3api delete-objects --bucket s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --delete="$(aws s3api list-object-versions --bucket "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --output=json --query='{Objects: Versions[].{Key:Key,VersionId:VersionId}}')"
            
      - revert-migrations
      - destroy-environment
      
      # Here's where you will add some code to rollback on failure   
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: aa:1f:b6:78:3b:c5:61:91:4a:e0:97:9f:32:62:1c:ef
      - attach_workspace:
          at: ~/
      # Add ssh keys with fingerprint for login to ec2 server
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm
            apk add --update ansible
            pip install awscli
      - run:
          name: create an artifact.tar.gz of the backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/files
            mv artifact.tar.gz ~/project/.circleci/ansible/files/artifact.tar.gz
            ls ~/project/.circleci/ansible/files
           # tar -czvf artifact.tar.gz .
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - files/artifact.tar.gz   
      - run:
          name: Deploy backend
          command: | 
            cd .circleci/ansible     
            echo "Contents of the inventory.txt file is: "
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - run:
          name: delete bucket objects
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-environment
       
  smoke-test:
    docker:
       - image: amazon/aws-cli
       #- image: alpine:latest
      # Lightweight Docker image 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
             yum update -y
             yum install curl
            # yum install nodejs npm
            #yum install -y python3-pip
            #apk add --update curl
      - run:
          name: Get backend url
          command: |
              export BACKEND_IP=$(aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output=text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}" 
              export PUBLIC_DNS=$(aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicDnsName' --filters "Name=tag:project,Values=udapeople" --output=text)
              export PUBLIC_DNS_URL="http://${PUBLIC_DNS}:3030"
               echo "${PUBLIC_DNS_URL}"        
      - run:
          name: Backend smoke test.
          command: |
            
              if curl "${API_URL}/api/status" | grep "ok"
              then
                  return 0
              else
                  return 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then  
                return 0
              else
                return 1
              fi
            # if curl -s --head ${URL} 
            #if curl -s --head ${API_URL} for backend curl 
     # - run:
       #   name: delete bucket objects
       #   when: on_fail
     #     command: |
     #       aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
     # - revert-migrations
     # - destroy-environment
      # Change the first return 1 to 0 after the job fails
      # Here's where you will add some code to rollback on failure 
      #if curl "${API_URL}/api/status" | grep "ok"  
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
             yum install -y tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --stack-name latestcloudfront-${CIRCLE_WORKFLOW_ID:0:7} --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople
      - revert-migrations
      - destroy-environment
      # Here's where you will add some code to rollback on failure  

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run: yum install -y tar gzip
        - run:
            name: Get old stack workflow id
            command: |
              export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output=text)
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              # Fetch the stack names          
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output=text)) 
              echo Stack names: "${STACKS[@]}"          
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              fi        
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires: 
            - build-backend
      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires: 
            - build-frontend
      - deploy-infrastructure:
          requires: 
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          filters:
            branches:
              only: master
      - configure-infrastructure:
          requires: 
            - deploy-infrastructure
      - run-migrations:
          requires: 
            - configure-infrastructure
      - deploy-frontend:
          requires: 
            - run-migrations
      - deploy-backend:
          requires: 
            - run-migrations
      - smoke-test:
          requires: 
            - deploy-backend
            - deploy-frontend
      - cloudfront-update:
          requires: 
            - smoke-test
      - cleanup:
          requires: 
            - cloudfront-update